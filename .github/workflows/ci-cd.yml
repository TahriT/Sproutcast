name: PlantVision CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_BASE: ghcr.io/${{ github.repository_owner }}/plantvision

jobs:
  # Job 1: Code Quality and Testing
  test:
    name: Run Tests and Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov flake8 black mypy
          pip install -r web/requirements.txt
          pip install -r ai/requirements.txt

      - name: Run Python code formatting check
        run: |
          black --check --diff web/ ai/

      - name: Run Python linting
        run: |
          flake8 web/ ai/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 web/ ai/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run Python type checking
        run: |
          mypy web/main.py --ignore-missing-imports || true
          mypy ai/main.py --ignore-missing-imports || true

      - name: Set up C++ environment
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake
          sudo apt-get install -y libopencv-dev nlohmann-json3-dev

      - name: Build C++ application
        run: |
          cd cpp
          mkdir -p build
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build --parallel $(nproc)

      - name: Run C++ tests (if available)
        run: |
          cd cpp/build
          if [ -f ./plantvision_cpp_test ]; then
            ./plantvision_cpp_test
          else
            echo "No C++ tests found, skipping..."
          fi

      - name: Python unit tests
        run: |
          cd web
          python -m pytest tests/ --cov=. --cov-report=xml --cov-report=term-missing || echo "No tests found"

  # Job 2: Build Docker Images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service: [web, cpp, ai]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_BASE }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Job 3: Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: read
      security-events: write
    
    strategy:
      matrix:
        service: [web, cpp, ai]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_BASE }}-${{ matrix.service }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 4: Integration Tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create test environment
        run: |
          # Update docker-compose to use built images
          sed -i "s|sproutcast/web:latest|${{ env.IMAGE_BASE }}-web:${{ github.sha }}|g" docker-compose.yml
          sed -i "s|sproutcast/cpp:latest|${{ env.IMAGE_BASE }}-cpp:${{ github.sha }}|g" docker-compose.yml
          sed -i "s|sproutcast/ai:latest|${{ env.IMAGE_BASE }}-ai:${{ github.sha }}|g" docker-compose.yml

      - name: Start services
        run: |
          docker-compose up -d
          sleep 30  # Wait for services to start

      - name: Run health checks
        run: |
          # Check web service health
          curl -f http://localhost:8001/health || exit 1
          
          # Check MQTT broker
          docker-compose exec -T mqtt-broker mosquitto_pub -h localhost -t test/topic -m "health check" || exit 1
          
          # Check if C++ service is processing
          docker-compose logs cpp-app | grep -q "PlantVision started" || exit 1

      - name: Run API integration tests
        run: |
          # Test API endpoints
          curl -f http://localhost:8001/api/plants || exit 1
          curl -f http://localhost:8001/api/sprouts || exit 1
          curl -f http://localhost:8001/api/video_feed || exit 1

      - name: Cleanup
        if: always()
        run: |
          docker-compose down -v
          docker system prune -f

  # Job 5: Deploy (Production)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build, security, integration]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create deployment package
        run: |
          # Create deployment directory
          mkdir -p deployment
          
          # Copy docker-compose production file
          cp docker-compose.prod.yml deployment/
          
          # Create deployment script
          cat > deployment/deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "Deploying PlantVision..."
          
          # Pull latest images
          docker-compose -f docker-compose.prod.yml pull
          
          # Start services
          docker-compose -f docker-compose.prod.yml up -d
          
          # Wait for services to be healthy
          sleep 30
          
          # Verify deployment
          curl -f http://localhost:8001/health || exit 1
          
          echo "Deployment successful!"
          EOF
          
          chmod +x deployment/deploy.sh

      - name: Create release archive
        run: |
          tar -czf plantvision-${{ github.sha }}.tar.gz deployment/

      - name: Upload deployment artifact
        uses: actions/upload-artifact@v3
        with:
          name: plantvision-deployment
          path: plantvision-${{ github.sha }}.tar.gz

      - name: Create Release (on tag)
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: PlantVision ${{ github.ref }}
          draft: false
          prerelease: false

  # Job 6: Cleanup old images
  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    
    steps:
      - name: Delete old container images
        uses: actions/github-script@v7
        with:
          script: |
            const response = await github.rest.packages.getAllPackageVersionsForPackageOwnedByUser({
              package_type: 'container',
              package_name: 'plantvision-web',
              username: context.repo.owner
            });
            
            // Keep only the latest 10 versions
            const versions = response.data;
            if (versions.length > 10) {
              const versionsToDelete = versions.slice(10);
              for (const version of versionsToDelete) {
                await github.rest.packages.deletePackageVersionForUser({
                  package_type: 'container',
                  package_name: 'plantvision-web',
                  username: context.repo.owner,
                  package_version_id: version.id
                });
              }
            }