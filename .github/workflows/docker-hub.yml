name: Build and Push to Docker Hub

on:
  push:
    branches: 
      - main
      - develop
    tags: 
      - 'v*.*.*'
  pull_request:
    branches: 
      - main
  workflow_dispatch:  # Allow manual triggers

env:
  DOCKER_HUB_ORG: sproutcast  # Change this to your Docker Hub organization/username

jobs:
  # Job 1: Build and Push C++ Vision Service
  build-cpp:
    name: Build C++ Vision Service
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_HUB_ORG }}/cpp
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./cpp
          file: ./cpp/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          target: production

  # Job 2: Build and Push Web UI Service
  build-web:
    name: Build Web UI Service
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_HUB_ORG }}/web
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./web
          file: ./web/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          target: production

  # Job 3: Build and Push AI Service
  build-ai:
    name: Build AI Service
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_HUB_ORG }}/ai
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./ai
          file: ./ai/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          target: production

  # Job 4: Update Docker Hub Repository Information
  update-dockerhub-description:
    name: Update Docker Hub Descriptions
    runs-on: ubuntu-latest
    needs: [build-cpp, build-web, build-ai]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    strategy:
      matrix:
        repo: [cpp, web, ai]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update Docker Hub description
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: ${{ env.DOCKER_HUB_ORG }}/${{ matrix.repo }}
          short-description: Sproutcast ${{ matrix.repo }} service - Real-time plant monitoring and analysis
          readme-filepath: ./docs/DOCKERHUB_${{ matrix.repo }}.md

  # Job 5: Security Scan
  security-scan:
    name: Security Scan Docker Images
    runs-on: ubuntu-latest
    needs: [build-cpp, build-web, build-ai]
    if: github.event_name != 'pull_request'
    
    strategy:
      matrix:
        service: [cpp, web, ai]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_HUB_ORG }}/${{ matrix.service }}:latest
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

  # Job 6: Create Multi-Service Release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-cpp, build-web, build-ai]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create Release Notes
        run: |
          cat > release_notes.md << EOF
          # Sproutcast Release ${{ steps.version.outputs.VERSION }}
          
          ## Docker Images
          
          Pull the latest images from Docker Hub:
          
          \`\`\`bash
          docker pull ${{ env.DOCKER_HUB_ORG }}/cpp:${{ steps.version.outputs.VERSION }}
          docker pull ${{ env.DOCKER_HUB_ORG }}/web:${{ steps.version.outputs.VERSION }}
          docker pull ${{ env.DOCKER_HUB_ORG }}/ai:${{ steps.version.outputs.VERSION }}
          \`\`\`
          
          ## Quick Start
          
          \`\`\`bash
          # Using docker-compose
          export IMAGE_TAG=${{ steps.version.outputs.VERSION }}
          docker-compose -f docker-compose.prod.yml up -d
          \`\`\`
          
          ## What's Changed
          
          See CHANGELOG.md for detailed changes.
          EOF

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: release_notes.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
